package com.videopolis.apis.model;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import com.videopolis.smaug.common.model.Facet;
import com.videopolis.smaug.common.model.FacetCategory;
import com.videopolis.smaug.model.FacetCount;

/**
 * This interface provides access to facetting information which has been
 * generated by an APIS request.
 * 
 * @author Christophe Fondacci
 * 
 */
public interface FacetInformation {

    /**
     * Retrieves the list of facetted categories
     * 
     * @return a collection of {@link FacetCategory}
     */
    Collection<FacetCategory> getFacettedCategories();

    /**
     * Retrieves the lists of facet counts hashed by their category.
     * 
     * @return the full facet count map which consists in a list of
     *         {@link FacetCount} per facetted category expressed as
     *         {@link FacetCategory}
     */
    Map<FacetCategory, List<FacetCount>> getFacetCountsMap();

    /**
     * A convenience method to access the list of facet counts without
     * manipulating the full facet map. This method is safe as it will return an
     * empty list when no facet exists for the specified category
     * 
     * @param category
     *            the {@link FacetCategory} for which caller want to list facet
     *            counts
     * @return a list of {@link FacetCount} returned for this facetted category
     */
    List<FacetCount> getFacetCounts(FacetCategory category);

    /**
     * Retrieves the count for the specified facet
     * 
     * @param facet
     *            the {@link Facet} to get the count for
     * @return the count of this facet, or 0 if this facet is not defined
     */
    int getFacetCount(Facet facet);

    /**
     * Retrieves the list of currently selected facets acting as filters for the
     * search query.
     * 
     * @return the collection of {@link Facet} defined as filters of the
     *         underlying search query
     */
    Collection<Facet> getFacetFilters();
}
